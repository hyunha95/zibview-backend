package com.view.zib.domain.location.service.impl;

import com.view.zib.domain.location.controller.request.SaveLocationRequest;
import com.view.zib.domain.location.entity.Location;
import com.view.zib.domain.location.service.LocationCommandService;
import com.view.zib.mock.FakeAuthService;
import com.view.zib.mock.FakeLocationRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertAll;

class LocationCommandServiceImplTest {

    private LocationCommandService locationCommandService;
    private FakeLocationRepository fakeLocationRepository = new FakeLocationRepository();
    private FakeAuthService fakeAuthService = new FakeAuthService();

    @BeforeEach
    void setUp() {
        locationCommandService = LocationCommandServiceImpl.builder()
                .authService(fakeAuthService)
                .locationRepository(fakeLocationRepository)
                .build();

    }

    @Test
    void shouldSaveLocationWhenNotExistsOnDatabase() {
        // given
        SaveLocationRequest request = new SaveLocationRequest(
                new SaveLocationRequest.Coords(5, 0, -1, -1, 37.785834, -122.406417, -1),
                1716158866110.6719
        );

        // when
        locationCommandService.saveLocation(request);

        // then - 1L is generated by beforeEach
        Location location = fakeLocationRepository.findById(1L).get();
        assertAll(() -> {
            assertThat(fakeLocationRepository.count()).isEqualTo(1);
            assertThat(location.getId()).isEqualTo(1L);
            assertThat(location.getAccuracy()).isEqualTo(5);
            assertThat(location.getAltitude()).isEqualTo(0);
            assertThat(location.getAltitudeAccuracy()).isEqualTo(-1);
            assertThat(location.getHeading()).isEqualTo(-1);
            assertThat(location.getLatitude()).isEqualTo(37.785834);
            assertThat(location.getLongitude()).isEqualTo(-122.406417);
            assertThat(location.getSpeed()).isEqualTo(-1);
            assertThat(location.getTimestamp()).isEqualTo(1716158866110.6719);
        });
    }

    @Test
    void shouldUpdateLocationWhenExistsOnDatabase() {
        // given
        fakeLocationRepository.save(Location.builder()
                .user(fakeAuthService.getCurrentUser())
                .accuracy(5)
                .altitude(0)
                .altitudeAccuracy(-1)
                .heading(-1)
                .latitude(37.785834)
                .longitude(-122.406417)
                .speed(-1)
                .timestamp(1716158866110.6719)
                .build());

        SaveLocationRequest request = new SaveLocationRequest(
                new SaveLocationRequest.Coords(6, 1, -2, -2, 37.111111, -122.222222, -2),
                1716158866110.9999
        );

        // when
        locationCommandService.saveLocation(request);

        // then
        Location location = fakeLocationRepository.findById(1L).get();
        assertAll(() -> {
            assertThat(fakeLocationRepository.count()).isEqualTo(1);
            assertThat(location.getId()).isEqualTo(1L);
            assertThat(location.getAccuracy()).isEqualTo(6);
            assertThat(location.getAltitude()).isEqualTo(1);
            assertThat(location.getAltitudeAccuracy()).isEqualTo(-2);
            assertThat(location.getHeading()).isEqualTo(-2);
            assertThat(location.getLatitude()).isEqualTo(37.111111);
            assertThat(location.getLongitude()).isEqualTo(-122.222222);
            assertThat(location.getSpeed()).isEqualTo(-2);
            assertThat(location.getTimestamp()).isEqualTo(1716158866110.9999);
        });
    }

}